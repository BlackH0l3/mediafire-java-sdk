package com.mediafire.sdk.api.responses.upload;

/**
* Created by Chris on 11/13/2014.
*/
public enum ResumableResult {
    NO_ERROR(0),
    SUCCESS_FILE_MOVED_TO_ROOT(14),
    DROPBOX_KEY_INVALID_1(-1),
    DROPBOX_KEY_INVALID_2(-8),
    DROPBOX_KEY_INVALID_3(-11),
    INVALID_DROPBOX_CONFIG_1(-21),
    INVALID_DROPBOX_CONFIG_2(-22),
    UNKOWN_UPLOAD_ERROR_1(-31),
    UNKOWN_UPLOAD_ERROR_2(-40),
    MISSING_FILE_DATA(-32),
    UPLOAD_EXCEEDS_UPLOAD_MAX_FILESIZE(-41),
    UPLOAD_EXCEEDS_MAX_FILE_SIZE_SPECIFIED_IN_HTML_FORM(-42),
    UPLOAD_FILE_ONLY_PARTIALLY_UPLOADED(-43),
    NO_FILE_UPLOADED(-44),
    MISSING_TEMPORARY_FOLDER(-45),
    FAILED_TO_WRITE_FILE_TO_DISK(-46),
    PHP_EXTENSION_STOPPED_UPLOAD(-47),
    INVALID_FILE_SIZE(-48),
    MISSING_FILE_NAME(-49),
    FILE_SIZE_DOES_NOT_MATCH_SIZE_ON_DISK(-51),
    HASH_SENT_MISMATCH_ACTUAL_FILE_HASH(-90),
    MISSING_OR_INVALID_SESSION_TOKEN(-99),
    INVALID_QUICKKEY_OR_FILE_DOES_NOT_BELONG_TO_SESSION_USER(-203),
    USER_DOES_NOT_HAVE_WRITE_PERMISSIONS_FOR_THIS_FILE(-204),
    USER_DOES_NOT_HAVE_WRITE_PERMISSION_FOR_DESTINATION_FOLDER(-205),
    ATTEMPTING_RESUMABLE_UPLOAD_UNIT_UPLOAD_BEFORE_CALLING_PRE_UPLOAD(-302),
    INVALID_UNIT_SIZE(-303),
    INVALID_UNIT_HASH(-304),
    MAXIMUM_FILE_SIZE_FOR_FREE_USERS_EXCEEDED_1(-701),
    MAXIMUM_FILE_SIZE_FOR_FREE_USERS_EXCEEDED_2(-881),
    MAXIMUM_FILE_SIZE_EXCEEDED_1(-700),
    MAXIMUM_FILE_SIZE_EXCEEDED_2(-882),
    INTERNAL_SERVER_ERROR_1(-10),
    INTERNAL_SERVER_ERROR_2(-12),
    INTERNAL_SERVER_ERROR_3(-26),
    INTERNAL_SERVER_ERROR_4(-50),
    INTERNAL_SERVER_ERROR_5(-52),
    INTERNAL_SERVER_ERROR_6(-53),
    INTERNAL_SERVER_ERROR_7(-54),
    INTERNAL_SERVER_ERROR_8(-70),
    INTERNAL_SERVER_ERROR_9(-71),
    INTERNAL_SERVER_ERROR_10(-80),
    INTERNAL_SERVER_ERROR_11(-120),
    INTERNAL_SERVER_ERROR_12(-122),
    INTERNAL_SERVER_ERROR_13(-124),
    INTERNAL_SERVER_ERROR_14(-140),
    INTERNAL_SERVER_ERROR_15(-200),
    INTERNAL_SERVER_ERROR_16(-301),;

    private final int value;

    ResumableResult(int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }

    public static ResumableResult fromInt(int value) {
        for (final ResumableResult e : values()) {
            if (e.getValue() == value) {
                return e;
            }
        }
        throw new IllegalArgumentException("Return code out of range : " + value);
    }
}
